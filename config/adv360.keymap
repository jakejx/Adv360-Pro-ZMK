/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
/* THIS FILE WAS GENERATED!
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

#define COMBO_TERM_FAST 30
#define COMBO_TERM_SLOW 70

&mt {
    flavor = "tap-preferred";
    tapping-term-ms = <180>;
};

&lt { flavor = "balanced"; };

/ {
    behaviors {
        #include "macros.dtsi"
    #include "version.dtsi"

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <175>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        caps_shift: caps_shift {
            compatible = "zmk,behavior-tap-dance";
            label = "CAPS_SHIFT";
            #binding-cells = <0>;
            bindings = <&sk LEFT_SHIFT>, <&caps_word>;

            tapping-term-ms = <200>;
        };

        word_bspc: word_bspc {
            compatible = "zmk,behavior-hold-tap";
            label = "WORD_BSPC";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "tap-preferred";
        };

        lpar: lpar {
            compatible = "zmk,behavior-mod-morph";
            label = "LPAR";
            bindings = <&kp LEFT_PARENTHESIS>, <&kp LESS_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        rpar: rpar {
            compatible = "zmk,behavior-mod-morph";
            label = "RPAR";
            bindings = <&kp RIGHT_PARENTHESIS>, <&kp GREATER_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };
    };

    macros {
        go_eq: go_eq {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp COLON &kp EQUAL &kp SPACE>;
            label = "GO_EQ";
        };
    };

    combos {
        compatible = "zmk,combos";

        lpar {
            bindings = <&lpar>;
            key-positions = <41 42>;
            layers = <0>;
            require-prior-idle-ms = <150>;
            timeout-ms = <COMBO_TERM_FAST>;
        };

        rpar {
            bindings = <&rpar>;
            key-positions = <42 43>;
            layers = <0>;
            require-prior-idle-ms = <150>;
            timeout-ms = <COMBO_TERM_FAST>;
        };

        eql {
            bindings = <&kp EQUAL>;
            key-positions = <31 32>;
            require-prior-idle-ms = <150>;
            layers = <0>;
            timeout-ms = <COMBO_TERM_FAST>;
        };

        minus {
            bindings = <&kp MINUS>;
            key-positions = <31 30>;
            require-prior-idle-ms = <150>;
            layers = <0>;
            timeout-ms = <COMBO_TERM_FAST>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <56 57>;
            require-prior-idle-ms = <150>;
            timeout-ms = <COMBO_TERM_SLOW>;
        };

        lbrace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <17 16>;
            require-prior-idle-ms = <150>;
            layers = <0>;
            timeout-ms = <COMBO_TERM_FAST>;
        };

        rbrace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <24 25>;
            require-prior-idle-ms = <150>;
            layers = <0>;
            timeout-ms = <COMBO_TERM_FAST>;
        };

        lbkt {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <23 24>;
            require-prior-idle-ms = <150>;
            layers = <0>;
            timeout-ms = <COMBO_TERM_FAST>;
        };

        rbkt {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <25 24>;
            require-prior-idle-ms = <150>;
            layers = <0>;
            timeout-ms = <COMBO_TERM_FAST>;
        };

        underscore {
            bindings = <&kp UNDERSCORE>;
            key-positions = <30 29>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        copy {
            bindings = <&kp LG(C)>;
            key-positions = <48 49>;
        };

        paste {
            bindings = <&kp LG(V)>;
            key-positions = <49 50>;
        };

        undo {
            bindings = <&kp LG(Z)>;
            key-positions = <47 48>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp ESCAPE            &kp N1  &kp N2     &kp N3    &kp N4    &kp N5  &kp C_PLAY                                                                                             &mo 3         &kp N6  &kp N7    &kp N8     &kp N9   &kp N0          &kp MINUS
&kp TAB               &kp Q   &kp W      &kp E     &kp R     &kp T   &kp C_PREV                                                                                             &kp C_VOL_UP  &kp Y   &kp U     &kp I      &kp O    &kp P           &kp BSLH
&kp LEFT_CONTROL      &kp A   &kp S      &kp D     &kp F     &kp G   &kp C_NEXT  &kp LG(LS(LEFT_BRACKET))  &kp LG(LS(RIGHT_BRACKET))      &kp LC(LA(SPACE))  &kp LA(SPACE)  &kp C_VOL_DN  &kp H   &kp J     &kp K      &kp L    &mt LCTRL SEMI  &kp SINGLE_QUOTE
&sk LSHFT             &kp Z   &kp X      &kp C     &kp V     &kp B                                         &kp LS(LA(LC(LG(S))))          &kp PG_UP                                       &kp N   &kp M     &kp COMMA  &kp DOT  &kp FSLH        &sk LSHFT
&kp LS(LA(LC(LGUI)))  &mo 1   &kp GRAVE  &kp LALT  &kp LGUI          &kp SPACE   &kp ENTER                 &kp LS(LA(LC(LG(SPACE))))      &kp PG_DN          &kp BACKSPACE  &mo 1                 &kp LEFT  &kp DOWN   &kp UP   &kp DOWN        &kp LC(LA(LSHFT))
            >;
        };

        layers_symbols {
            bindings = <
&kp EQUAL   &kp N1    &kp N2      &kp N3                &kp N4                 &kp N5     &trans                                                       &mo 3   &trans     &trans     &trans     &trans     &trans  &kp MINUS
&kp TAB     &kp EXCL  &kp AT      &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp MINUS  &kp SLASH                                                    &none   &trans     &trans     &trans     &trans     &trans  &kp BSLH
&kp ESC     &kp AMPS  &kp DOLLAR  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp PLUS   &kp ASTERISK  &kp LCTRL  &kp LALT      &kp LGUI   &kp RCTRL  &none   &kp LEFT   &kp DOWN   &kp UP     &kp RIGHT  &trans  &kp SQT
&sk LSHIFT  &kp HASH  &kp CARET   &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp PIPE                            &kp HOME      &kp PG_UP                     &kp UNDER  &kp MINUS  &kp EQUAL  &go_eq     &trans  &sk RSHIFT
&mo 2       &trans    &trans      &trans                &trans                            &kp UNDER     &kp MINUS  &kp END       &kp PG_DN  &trans     &trans             &trans     &trans     &trans     &trans  &mo 2
            >;
        };

        layer_fn {
            bindings = <
&kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &kp F6  &tog 1                                      &mo 3   &kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &kp F12
&trans  &trans  &trans  &trans  &trans  &trans  &none                                       &none   &trans  &trans  &trans  &trans   &trans   &trans
&trans  &trans  &trans  &trans  &trans  &trans  &none   &trans  &trans      &trans  &trans  &none   &trans  &trans  &trans  &trans   &trans   &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans      &trans                  &trans  &trans  &trans  &trans   &trans   &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans      &trans  &trans  &trans          &trans  &trans  &trans   &trans   &trans
            >;
        };

        layer_mod {
            bindings = <
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none                                                  &trans                  &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none         &bootloader                                            &bootloader             &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none         &none        &none  &none      &bt BT_CLR  &none       &rgb_ug RGB_MEFS_CMD 5  &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &trans        &none                             &none      &none                                           &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none                       &none        &none  &none      &none       &bl BL_TOG  &rgb_ug RGB_TOG                &bl BL_INC  &bl BL_DEC  &none  &none  &none
            >;
        };
    };
};
